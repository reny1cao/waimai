Instruction on how to use the application

deployment url:

npm install
- Start front-end : 
yarn add semantic-ui-react
cd client/src
npm start

- Start back-end
node server.js

- /Home will lead you to the default home page showing the restaurants
But accessing anything beyond that will take you to login screen

-Log In page you will be asked to log in as customer, restaurant or admin

Customer Login: username: user, password: user
Restaurant Login: username: user2, password: user2
Admin Login: username: admin, password: admin

Wrong username or password will have a popup red error message

Once you log in as a user, the navigation bar (gray bar on the top) will change according
to the session cookie, and the text on the top right will show the type of user currently logged
in. Using the navigation bar can lead you to the login/signup page when not logged in, or 
can allow you to log out when you are logged in.


Logging in as Admin:
Once you log in as admin you will be brought to adminview.
As an admin you can toggle between looking at all restaurants and all user data within the database.
You can also search for restaurant or user by their names.

Once you click search you will need to hit back to get back all the user/ restaurant data.

The data can be deleted or editted by the admin. When deleting there will be a window pop-up
warning to delete the user/restaurant. Once confirmed the user will be removed from the server.

Editing by clicking the edit button and go into edit mode for one restaurant. You can change
all the descriptions and data directly stored in the database.

Unique username are enforced so user cannot share usernames, but user and restaurants can.
That means you cannot edit the username to be the same either.

Logging in as customer and restaurant will bring you to their respective pages, and change the
session user to the correponding type/ id.




- For Product where you can buy stuff and checkoutï¼š
Click on Product tab or Go to 
http://localhost:3000/ProductList
You can use the add button to add the product you want to add 
Then you can view your Shopping cart and remove anything you don't want.
Finally you checkout to pay and will direct you to the login page



- Overview of the routes 
Middlewares: authenticateCustomer, authenticateAdmin, authenticateRestaurant, will 
authenticate the current user based on their usertype and id.
Post  /admin Allows to create new admin, (this is not available for normal users)
Post /customer/sign-up Allows to create new customer into the database, the customer is 
based on a specific model with name, address, and other info.
Get /customer Gets all the customers in the database, used for adminview.
Get /customer/:id/cart Gets the customer's cart items, the food items they put in their cart
(only accessable by the specific customer).
Post /customer/:id/cart Create a new order to the customer, added to the customer (only
accessed by the specific customer).
Patch /customer/:id Change specific customer information within the database, used in adminview.
Delete /customer/:id Delete the specific customer from the database, used in adminview.
Post /login Allows customer users to log in by checking username and password in existing db.
Post /login/restaurant Allows restaurant users to log in by checking username and password in existing db.
Post /login/admin Allows admin users to log in by checking username and password in existing db.
Post /logout Logs out the user (no matter the type) and destroy the current session.
Get /check-session Check if a user is currently Logged in and which type of user, by setting the session
username and session userType to the current user.
Post /restaurant/sign-up Allows to create new restaurant into the database, the restaurant is 
based on a specific model with name, address, and other info.
Get /restaurant/:id Get information on the specific restaurant.
Get /restaurant/:id/order Get all the orders from the specific restaurant.
Get /restaurant Get all the restaurant to showcase the restaurant in the main menu and 
for adminview
Get /restaurant/:id/order/:order_id Get the specific order based on order id from a specific restaurant.
Patch /restaurant/:id Edit restaurant information for admin use.
Patch / restaurant/:id/add-category Add a category of cuisine to a restaurant.
Delete /restaurant/:id/:cate_id Delete a specific category from the restaurant
Patch /restaurant/:id/:cate_id/add-item Add an food item to the restaurant.
Delete /restaurant/:id/:cate_id/:item_id Delete an food item from a restaurant
Patch /restaurant/:id/:cate_id Edit the ecategory name from a restaurant
Patch /restaurant/:id/:cate_id/:item_id Edit a menu item from the restaurant.
Delete /restaurant/:id Deleting a restaurant off the database, for admin use.
Delete /restaurant/:id/order/:order_id Deleting an order from a restaurant.
Get http://localhost:5000/api/products  You can get product data
Post http://localhost:5000/api/products  You can post product data using data.js